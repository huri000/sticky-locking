///
///  BasicTypeTests.swift
///
///  Copyright 2017 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 10/6/17.
///
import XCTest
import TestFixtures

///
/// NOTE: This file was auto generated by gyb from file BasicClassTests.swift.gyb using the following command.
///
/// gyb --line-directive '' BasicClassTests.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.  Modify BasicClassTests.swift.gyb instead.
///

% for Type in ["BasicClass", "BasicStruct"]:
///
/// ${Type} tests.
///
/// - Note It's important to test the fixture so we can be confident that
///        when we use them for testing other parts of the system, we
///        are sure they are not causing an unwanted side affect or false
///        positve/negative.
///
class ${Type}Tests: XCTestCase {

    // MARK: - Test Initialization

    func testInitWithNoArguments() {
        let input = ${Type}()
        let expected = (boolVar: false, intVar: 0, doubleVar: 0.00, stringVar: "")

        XCTAssertEqual(input.boolVar,   expected.boolVar)
        XCTAssertEqual(input.intVar,    expected.intVar)
        XCTAssertEqual(input.doubleVar, expected.doubleVar)
        XCTAssertEqual(input.stringVar, expected.stringVar)
    }

    func testInitWithArguments() {
        let input = ${Type}(boolVar: true, intVar: 10, doubleVar: 20.10, stringVar: "Test String")
        let expected = (boolVar: true, intVar: 10, doubleVar: 20.10, stringVar: "Test String")

        XCTAssertEqual(input.boolVar,   expected.boolVar)
        XCTAssertEqual(input.intVar,    expected.intVar)
        XCTAssertEqual(input.doubleVar, expected.doubleVar)
        XCTAssertEqual(input.stringVar, expected.stringVar)
    }

    // MARK: - Test Equal

    func testEqualWithNoArguments() {
        let input    = ${Type}()
        let expected = ${Type}(boolVar: false, intVar: 0, doubleVar: 0.00, stringVar: "")

        XCTAssertEqual(input, expected)
    }

    func testEqualWithArguments() {
        let input    = ${Type}(boolVar: true, intVar: 10, doubleVar: 20.10, stringVar: "Test String")
        let expected = ${Type}(boolVar: true, intVar: 10, doubleVar: 20.10, stringVar: "Test String")

        XCTAssertEqual(input, expected)
    }

    func testEqualDifferentBoolVar() {
        let input    = ${Type}(boolVar: true)
        let expected = ${Type}(boolVar: false)

        XCTAssertNotEqual(input, expected)
    }

    func testEqualDifferentIntVar() {
        let input    = ${Type}(intVar: 10)
        let expected = ${Type}(intVar: 0)

        XCTAssertNotEqual(input, expected)
    }

    func testEqualDifferentDoubleVar() {
        let input    = ${Type}(doubleVar: 20.00)
        let expected = ${Type}(doubleVar: 0.00)

        XCTAssertNotEqual(input, expected)
    }

    func testEqualDifferentStringVar() {
        let input    = ${Type}(stringVar: "Test String")
        let expected = ${Type}(stringVar: "")

        XCTAssertNotEqual(input, expected)
    }

    // MARK: - Test Encoding

    func testEncode() throws {
        let input = ${Type}(boolVar: true, intVar: 10, doubleVar: 20.10, stringVar: "Test String")
        let expected = "{\"stringVar\":\"Test String\",\"intVar\":10,\"boolVar\":true,\"doubleVar\":20.1}"

        let result = String(data: try JSONEncoder().encode(input), encoding: .utf8)

        XCTAssertEqual(result, expected)
    }

    func testDecode() throws {
        let input = "{\"stringVar\":\"Test String\",\"intVar\":10,\"boolVar\":true,\"doubleVar\":20.1}".data(using: .utf8)
        let expected = ${Type}(boolVar: true, intVar: 10, doubleVar: 20.10, stringVar: "Test String")

        if let data = input {
            let result = try JSONDecoder().decode(${Type}.self, from: data)

            XCTAssertEqual(result, expected)
        } else {
            XCTFail()
        }
    }

    // MARK: - Test Description

    func testDescription() {
        let input = ${Type}(boolVar: true, intVar: 10, doubleVar: 20.10, stringVar: "Test String")
        let expected = "\(String(describing: ${Type}.self))(boolVar: true, intVar: 10, doubleVar: 20.1, stringVar: \"Test String\")"

        XCTAssertEqual(input.description, expected)
    }
}

%end
